package github

import (
	"context"
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
)

func TestAccGithubRepositoryVulnerabilityAlerts_basic(t *testing.T) {
	rn := "github_repository_vulnerability_alerts.test"
	rString := acctest.RandString(5)
	repoName := fmt.Sprintf("tf-acc-test-repository-vulnerability-alerts-%s", rString)

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccGithubRepositoryVulnerabilityAlertsDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccGithubRepositoryVulnerabilityAlertsConfig(repoName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckGithubRepositoryVulnerabilityAlertsExists(rn, repoName),
					resource.TestCheckResourceAttr(rn, "repository", repoName),
				),
			},
		},
	})
}

func testAccCheckGithubRepositoryVulnerabilityAlertsExists(n, id string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("Not Found: %s", n)
		}

		if rs.Primary.ID != id {
			return fmt.Errorf("Expected ID to be %v, got %v", id, rs.Primary.ID)
		}

		conn := testAccProvider.Meta().(*Organization).client
		o := testAccProvider.Meta().(*Organization).name

		enabled, _, err := conn.Repositories.GetVulnerabilityAlerts(context.TODO(), o, id)
		if err != nil {
			return err
		}

		if !enabled {
			return fmt.Errorf("Expected vulnerability alerts to be enabled on %v", id)
		}

		return nil
	}
}

func testAccGithubRepositoryVulnerabilityAlertsDestroy(s *terraform.State) error {
	conn := testAccProvider.Meta().(*Organization).client

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "github_repository_vulnerability_alerts" {
			continue
		}

		o := testAccProvider.Meta().(*Organization).name
		enabled, _, err := conn.Repositories.GetVulnerabilityAlerts(context.TODO(), o, rs.Primary.ID)

		if err == nil {
			if enabled {
				return fmt.Errorf("Repositor vulnerability alerts still exist")
			}
		}
		return nil
	}
	return nil
}

func testAccGithubRepositoryVulnerabilityAlertsConfig(repoName string) string {
	return fmt.Sprintf(`
resource "github_repository" "test" {
  name        = "%s"
  description = "Terraform Acceptance Test %s"
  auto_init   = true
}

resource "github_repository_vulnerability_alerts" "test" {
  repository = "${github_repository.test.name}"
}
`, repoName, repoName)
}
