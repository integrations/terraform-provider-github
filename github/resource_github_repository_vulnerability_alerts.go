package github

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
)

func resourceGithubRepositoryVulnerabilityAlerts() *schema.Resource {
	return &schema.Resource{
		Create: resourceGithubRepositoryVulnerabilityAlertsCreate,
		Read:   resourceGithubRepositoryVulnerabilityAlertsRead,
		Delete: resourceGithubRepositoryVulnerabilityAlertsDelete,

		Schema: map[string]*schema.Schema{
			"repository": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
		},
	}
}

func resourceGithubRepositoryVulnerabilityAlertsCreate(d *schema.ResourceData, meta interface{}) error {
	err := checkOrganization(meta)
	if err != nil {
		return err
	}

	client := meta.(*Organization).client

	orgName := meta.(*Organization).name
	repoName := d.Get("repository").(string)

	log.Printf("[DEBUG] Creating repository vulnerability alerts: %s/%s", orgName, repoName)
	ctx := context.WithValue(context.Background(), ctxId, d.Id())
	_, err = client.Repositories.EnableVulnerabilityAlerts(ctx, orgName, repoName)
	if err != nil {
		return err
	}

	d.SetId(repoName)

	return resourceGithubRepositoryVulnerabilityAlertsRead(d, meta)
}

func resourceGithubRepositoryVulnerabilityAlertsRead(d *schema.ResourceData, meta interface{}) error {
	err := checkOrganization(meta)
	if err != nil {
		return err
	}

	client := meta.(*Organization).client

	repoName := d.Id()
	if err != nil {
		return err
	}
	orgName := meta.(*Organization).name

	log.Printf("[DEBUG] Reading repository vulnerability alerts: %s/%s", orgName, repoName)
	ctx := context.WithValue(context.Background(), ctxId, d.Id())
	enabled, _, err := client.Repositories.GetVulnerabilityAlerts(ctx, orgName, repoName)
	if err != nil {
		return fmt.Errorf("Error reading repository vulnerability alerts: %v", err)
	}
	if !enabled {
		d.SetId("")
	}

	return nil
}

func resourceGithubRepositoryVulnerabilityAlertsDelete(d *schema.ResourceData, meta interface{}) error {
	err := checkOrganization(meta)
	if err != nil {
		return err
	}

	client := meta.(*Organization).client
	repoName := d.Id()
	if err != nil {
		return err
	}

	orgName := meta.(*Organization).name
	ctx := context.WithValue(context.Background(), ctxId, d.Id())
	log.Printf("[DEBUG] Deleting repository vulnerability alerts%s/%s", orgName, repoName)
	_, err = client.Repositories.DisableVulnerabilityAlerts(ctx, orgName, repoName)

	return err
}
